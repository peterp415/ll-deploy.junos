---

# Build directory settings
junos_build_root: ./build_dir
junos_build_dir: "{{ junos_build_root }}/{{ inventory_hostname }}/tmp"
junos_conf_file: "{{ junos_build_root }}/{{ inventory_hostname }}/junos.conf"

# JunOS settings
# The Vagrant plugin vagrant-junos sets up ssh access as vagrant, so we will use it
junos_config_user: "{{ ansible_ssh_user }}"
# But NETCONF needs the key to be active, so be sure to
#   ssh-add ~/.vagrant.d/insecure_private_key

# Common template variables

junos_location:
  time_zone: PST

junos_common_config:
  # Management Authorization
  management_authorization: |
    system {
        root-authentication {
            encrypted-password "$5$LfdyRnV4$kZdd6xVMBVbRnf6kz0mHfP7Pc46ppQJBGgMpYmFBdbD";
            ssh-rsa "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDb4LFNJ/pR3SzkSHomEm5v+JkTq75PR8le5osLl8IcrA9yZRCePZb5xLmxmbKWuamlfgVYyiTgMdAs2i6ZBuLVpuHxgPVRNHfHSeMap23Za1P2eI7zmRqU4U1Ljo6XnO3OExrt6nfQNqMDSK+JHxCa4VgBTjg2A7h0NeoTq9cotoRQsdDCtY7OfZ+iMESSJ10yZLQQmQzw7m3yZXLvVhQJoHwD3Zrv4wuX20vh19LM9X3yQOT9OKCAd0DSbELxrHtUcFnXpZ8rwJlLkataCgsqex1r7e+MmgPhwrC2my7KBvWYOeGseb4hLBn5qZtvVDa9ChuTQmukg/UV3UqJF6LV vagrant";
            ssh-rsa "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDoGQ8mmQdVCJ5kG6SCGOq8hYalSKQU/fWUUJKDPCDV7Nfm5yq9pg3M4d+EHLkiUOjOGw0+rPitCgWMEB+iWyqoAtmF00rVAcdUApKNPSisErdYJr88+rGCRvtMyOs5AbSVdVuJogB7iLfJEccL3GpdcuJBPoMmFCCmx3lpNaLWULkqmhh9P0TbmImWhrWxCQ5I1fhkqi+ycQ4JGgmLHAzAbdLjjMUc2cdSDNY6+H24LYHEHe0KMzOtzSU5zpDyDvg6Kr8sNvfa9zV3iaLRTrC8rbu3Ir2rhHHbABwK3p+zKsW3N3h2UvBtkf+Dh0r6qq+u6HFmLgyF1+49uvLlDhaR vagrant";
        }
        services {
            ssh {
                root-login allow;
            }
            netconf {
                ssh;
            }
            web-management {
                http {
                    interface ge-0/0/0.0;
                }
            }
        }
    }
  management_logins: |
    system {
        login {
            user vagrant {
                uid 2000;
                class super-user;
                authentication {
                    ssh-rsa "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key";
                }
            }
        }
    }
  management_misc: |
    version 12.1X47-D20.7;
    system {
        syslog {
            user * {
                any emergency;
            }
            file messages {
                any any;
                authorization info;
            }
            file interactive-commands {
                interactive-commands any;
            }
        }
        license {
            autoupdate {
                url https://ae1.juniper.net/junos/key_retrieval;
            }
        }
    }
    security {
        screen {
            ids-option untrust-screen {
                icmp {
                    ping-death;
                }
                ip {
                    source-route-option;
                    tear-drop;
                }
                tcp {
                    syn-flood {
                        alarm-threshold 1024;
                        attack-threshold 200;
                        source-threshold 1024;
                        destination-threshold 2048;
                        queue-size 2000; ## Warning: 'queue-size' is deprecated
                        timeout 20;
                    }
                    land;
                }
            }
        }
        zones {
            functional-zone management {
                interfaces {
                    ge-0/0/0.0 {
                        host-inbound-traffic {
                            system-services {
                                all;
                            }
                            protocols {
                                all;
                            }
                        }
                    }
                }
            }
            security-zone trust {
                tcp-rst;
            }
            security-zone untrust {
                screen untrust-screen;
            }
        }
    }

# SRX template variables

# Policies and routes
# Basic zones and traffic policies
# FIXME: should be more like:
#   `security zones security-zone trust host-inbound-traffic system-services` "ping", "ssh", "netconf"
#   `security zones security-zone untrust host-inbound-traffic system-services` "ping", "ike"
junos_zones:
  - name: "trust"
    host_inbound_traffic: ["system-services all", "protocols all"]
  - name: "untrust"
    host_inbound_traffic: ["system-services all", "protocols all"]
# Basic zone-to-zone defaults
#  set security policies from-zone trust to-zone trust policy default-permit match source-address any
#  set security policies from-zone trust to-zone trust policy default-permit match destination-address any
#  set security policies from-zone trust to-zone trust policy default-permit match application any
#  set security policies from-zone trust to-zone trust policy default-permit then permit
#  set security policies from-zone trust to-zone untrust policy default-permit match source-address any
#  set security policies from-zone trust to-zone untrust policy default-permit match destination-address any
#  set security policies from-zone trust to-zone untrust policy default-permit match application any
#  set security policies from-zone trust to-zone untrust policy default-permit then permit
#  set security policies from-zone untrust to-zone trust policy default-deny match source-address any
#  set security policies from-zone untrust to-zone trust policy default-deny match destination-address any
#  set security policies from-zone untrust to-zone trust policy default-deny match application any
#  set security policies from-zone untrust to-zone trust policy default-deny then deny
junos_zone_security_policies:
  - name: "trust-to-trust"
    from_zone: "trust"
    to_zone: "trust"
    policies:
      - name: "default-permit"
        match: ["source-address any", "destination-address any", "application any"]
        then: "permit"
  - name: "trust-to-untrust"
    from_zone: "trust"
    to_zone: "untrust"
    policies:
      - name: "default-permit"
        match: ["source-address any", "destination-address any", "application any"]
        then: "permit"
  - name: "untrust-to-trust"
    from_zone: "untrust"
    to_zone: "trust"
    policies:
      - name: "default-deny"
        match: ["source-address any", "destination-address any", "application any"]
        then: "deny"

# IPSec VPNs

# IPsec: ike/ipsec proposals and policies
#  set security ike policy preshared mode main
#  set security ike policy preshared proposal-set standard
#  set security ike policy preshared pre-shared-key ascii-text "$9$w22oZHqfn/tUj/tuOcSwYg"
#  set security ipsec policy std proposal-set standard
junos_ike_proposals:
  - name: "ike-proposal-vpntest1"
    params: |
      authentication-method pre-shared-keys;
      dh-group group2;
      authentication-algorithm sha1;
      encryption-algorithm aes-128-cbc;

junos_ike_policies:
  # Standard, preshared key policy
  - name: "preshared"
    params: |
      mode main;
      proposal-set standard;
      pre-shared-key ascii-text "swordfish";
  # Custom policies
  - name: "ike-policy-vpntest1"
    params: |
      mode main;
      proposals ike-proposal-vpntest1;
      pre-shared-key ascii-text "swordfish";

junos_ipsec_policies:
  - name: "std"
    proposal_set: "standard"
