---

# Build directory settings
junos_build_root: ./build_dir
junos_build_dir: "{{ junos_build_root }}/{{ inventory_hostname }}/tmp"
junos_conf_file: "{{ junos_build_root }}/{{ inventory_hostname }}/junos.conf"

# JunOS settings
# The Vagrant plugin vagrant-junos sets up ssh access as vagrant, so we will use it
junos_config_user: "{{ ansible_ssh_user }}"
# But NETCONF needs the key to be active, so be sure to
#   ssh-add ~/.vagrant.d/insecure_private_key
netconf:
  host: "{{ junos_config_hostname }}"
  username: "{{ junos_config_user }}"

# Common template variables

junos_location:
  time_zone: PST

junos_ssh_root_login: "true"
junos_root_auth:
  encrypted_password: $5$LfdyRnV4$kZdd6xVMBVbRnf6kz0mHfP7Pc46ppQJBGgMpYmFBdbD
  ssh_key: ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key

junos_users:
  - name: vagrant
    uid: 2000
    class: super-user
    ssh_key: ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key

# SRX template variables

# Policies and routes
# Basic zones and traffic policies
# FIXME: should be more like:
#   `security zones security-zone trust host-inbound-traffic system-services` "ping", "ssh", "netconf"
#   `security zones security-zone untrust host-inbound-traffic system-services` "ping", "ike"
junos_zones:
  - name: "trust"
    host_inbound_traffic: ["system-services all", "protocols all"]
  - name: "untrust"
    host_inbound_traffic: ["system-services all", "protocols all"]
  - name: "vpn"
    host_inbound_traffic: ["system-services all", "protocols all"]
# Basic zone-to-zone defaults
#  set security policies from-zone trust to-zone trust policy default-permit match source-address any
#  set security policies from-zone trust to-zone trust policy default-permit match destination-address any
#  set security policies from-zone trust to-zone trust policy default-permit match application any
#  set security policies from-zone trust to-zone trust policy default-permit then permit
#  set security policies from-zone trust to-zone untrust policy default-permit match source-address any
#  set security policies from-zone trust to-zone untrust policy default-permit match destination-address any
#  set security policies from-zone trust to-zone untrust policy default-permit match application any
#  set security policies from-zone trust to-zone untrust policy default-permit then permit
#  set security policies from-zone untrust to-zone trust policy default-deny match source-address any
#  set security policies from-zone untrust to-zone trust policy default-deny match destination-address any
#  set security policies from-zone untrust to-zone trust policy default-deny match application any
#  set security policies from-zone untrust to-zone trust policy default-deny then deny
junos_zone_security_policies:
  - name: "trust-to-trust"
    from_zone: "trust"
    to_zone: "trust"
    policies:
      - name: "default-permit"
        match: ["source-address any", "destination-address any", "application any"]
        then: "permit"
  - name: "trust-to-untrust"
    from_zone: "trust"
    to_zone: "untrust"
    policies:
      - name: "default-permit"
        match: ["source-address any", "destination-address any", "application any"]
        then: "permit"
  - name: "untrust-to-trust"
    from_zone: "untrust"
    to_zone: "trust"
    policies:
      - name: "default-deny"
        match: ["source-address any", "destination-address any", "application any"]
        then: "deny"
  - name: "trust-to-vpn"
    from_zone: "trust"
    to_zone: "vpn"
    policies:
      - name: "any"
        match: ["source-address any", "destination-address any", "application any"]
        then: "permit"
  - name: "vpn-to-trust"
    from_zone: "vpn"
    to_zone: "trust"
    policies:
      - name: "any"
        match: ["source-address any", "destination-address any", "application any"]
        then: "permit"

# IPSec VPNs

# IPsec: ike/ipsec proposals and policies
#  set security ike policy preshared mode main
#  set security ike policy preshared proposal-set standard
#  set security ike policy preshared pre-shared-key ascii-text "$9$w22oZHqfn/tUj/tuOcSwYg"
#  set security ipsec policy std proposal-set standard
junos_ike_proposals:
  - name: "ike-proposal-vpntest1"
    params: |
      authentication-method pre-shared-keys;
      dh-group group2;
      authentication-algorithm sha1;
      encryption-algorithm aes-128-cbc;

junos_ike_policies:
  # Standard, preshared key policy
  - name: "preshared"
    params: |
      mode main;
      proposal-set standard;
      pre-shared-key ascii-text "swordfish";
  # Custom policies
  - name: "ike-policy-vpntest1"
    params: |
      mode main;
      proposals ike-proposal-vpntest1;
      pre-shared-key ascii-text "swordfish";

junos_ipsec_policies:
  - name: "std"
    proposal_set: "standard"
